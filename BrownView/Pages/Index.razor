@page "/"
@using Brown

<h3>Метод брауна</h3>

<style>
    input {
        width: 50px;
    }

    th, td {
        width: 60px;
    }

    .red {
        color: red;
    }
</style>

<div>
    Матрица
    <select bind="@m">
        @for (int i = 2; i < 7; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
    x
    <select bind="@n">
        @for (int i = 2; i < 7; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
    <br />
    <br />
    <form onsubmit="@OnClick">
        <label>Итераций:</label>
        <input type="number" bind="@iter" style="width: 100px" />
        <table>
            @for (int i = 0; i < m; i++)
            {
                <tr>
                    @for (int j = 0; j < n; j++)
                    {
                        var idx = i * n + j;
                        <td>
                            <input type="number" bind="@arr[idx]" required />
                        </td>
                    }
                </tr>
            }
        </table>
        <br />
        <button type="submit">Построить решение</button>
    </form>
    <br />
    @if (result != null)
    {
        if (result.SedlT)
        {
            <p>Игра имеет решение в чистых стратегиях</p>
        }
        else
        {
            <p>a = @result.A</p>
            <p>b = @result.B</p>
            <p>
                P* = (
                @foreach (var p in result.P)
                {
                    @(p.ToString("F") + "; ")
                }
                )
            </p>
            <p>
                Q* = (
                @foreach (var q in result.Q)
                {
                    @(q.ToString("F") + "; ")
                }
                )
            </p>
            <p>
                V = @result.V.ToString("F")
            </p>
        }

        if (result.Iters?.Any() == true)
        {
            <table border="1">
                <thead>
                    <tr>
                        <th>K</th>
                        <th>i</th>
                        @for (int i = 0; i < result.Iters[0].B.Length; i++)
                        {
                            <th>@($"B{i + 1}")</th>
                        }
                        <th>a K</th>
                        <th>j</th>
                        @for (int i = 0; i < result.Iters[0].A.Length; i++)
                        {
                            <th>@($"A{i + 1}")</th>
                        }
                        <th>b K</th>
                        <th>v K</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in result.Iters)
                    {
                        <tr>
                            <td>@r.K</td>
                            <td>@r.i</td>
                            @for (int i = 0; i < r.B.Length; i++)
                            {
                                <td class="@(r.BMin == i ? "red" : "")">@r.B[i]</td>
                            }
                            <td>@r.Ak.ToString("F")</td>
                            <td>@r.j</td>
                            @for (int i = 0; i < r.A.Length; i++)
                            {
                                <td class="@(r.AMax == i ? "red" : "")">@r.A[i]</td>
                            }
                            <td>@r.Bk.ToString("F")</td>
                            <td>@r.Vk.ToString("F")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

@functions {
    int m, n, iter = 10;

    int[] arr = new int[128];

    BrownMethod.BrownResult result;

    protected override void OnParametersSet()
    {
        m = 2;
        n = 4;

        arr[0] = 5;
        arr[1] = 4;
        arr[2] = 3;
        arr[3] = 2;

        arr[4] = 1;
        arr[5] = 4;
        arr[6] = 4;
        arr[7] = 7;
    }

    void OnClick()
    {
        var list = new int[m][];
        for (int i = 0; i < m; i++)
        {
            list[i] = new int[n];
            for (int j = 0; j < n; j++)
            {
                var idx = i * n + j;
                list[i][j] = arr[idx];
            }
        }

        result = BrownMethod.braun(list, iter);
        //Console.WriteLine(result.Count);
    }
}